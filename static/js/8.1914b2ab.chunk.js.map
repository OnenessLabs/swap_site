{"version":3,"sources":["packages/destr/src/index.ts"],"names":["suspectProtoRx","suspectConstructorRx","JsonSigRx","jsonParseTransform","key","value","console","warn","warnKeyDropped","destr","options","arguments","length","undefined","_value","trim","endsWith","includes","slice","_lval","toLowerCase","Number","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","test","strict","SyntaxError","Error","JSON","parse","error"],"mappings":"kJAEA,MAAMA,EAAiB,oIACjBC,EAAuB,iKAEvBC,EAAY,2DAElB,SAASC,EAAmBC,EAAaC,GACvC,KAAY,cAARD,GAAgC,gBAARA,GAAyBC,GAA0B,kBAAVA,GAAsB,cAAeA,GAI1G,OAAOA,GAGT,SAAwBD,GACtBE,QAAQC,KAAM,qBAAoBH,0CAPhCI,CAAeJ,GAcZ,SAASK,EAAmBJ,GAAuC,IAA3BK,EAAgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAChE,GAAqB,kBAAVN,EACT,OAAOA,EAGT,MAAMS,EAAST,EAAMU,OACrB,GAEe,MAAbV,EAAM,IACNA,EAAMW,SAAS,OACdX,EAAMY,SAAS,MAGhB,OAAOH,EAAOI,MAAM,GAAI,GAG1B,GAAIJ,EAAOF,QAAU,EAAG,CACtB,MAAMO,EAAQL,EAAOM,cACrB,GAAc,SAAVD,EAEF,OAAO,EAET,GAAc,UAAVA,EAEF,OAAO,EAET,GAAc,cAAVA,EAEF,OAEF,GAAc,SAAVA,EAEF,OAAO,KAET,GAAc,QAAVA,EAEF,OAAOE,OAAOC,IAEhB,GAAc,aAAVH,EAEF,OAAOE,OAAOE,kBAEhB,GAAc,cAAVJ,EAEF,OAAOE,OAAOG,kBAIlB,IAAKtB,EAAUuB,KAAKpB,GAAQ,CAC1B,GAAIK,EAAQgB,OACV,MAAM,IAAIC,YAAY,wBAGxB,OAAOtB,EAGT,IACE,GAAIL,EAAeyB,KAAKpB,IAAUJ,EAAqBwB,KAAKpB,GAAQ,CAClE,GAAIK,EAAQgB,OACV,MAAM,IAAIE,MAAM,wCAElB,OAAOC,KAAKC,MAAMzB,EAAOF,GAE3B,OAAO0B,KAAKC,MAAMzB,GAClB,MAAO0B,GACP,GAAIrB,EAAQgB,OACV,MAAMK,EAGR,OAAO1B,GAQII","file":"static/js/8.1914b2ab.chunk.js","sourcesContent":["// https://github.com/fastify/secure-json-parse\r\n// https://github.com/hapijs/bourne\r\nconst suspectProtoRx = /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/\r\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/\r\n\r\nconst JsonSigRx = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/\r\n\r\nfunction jsonParseTransform(key: string, value: any): any {\r\n  if (key === '__proto__' || (key === 'constructor' && value && typeof value === 'object' && 'prototype' in value)) {\r\n    warnKeyDropped(key)\r\n    return\r\n  }\r\n  return value\r\n}\r\n\r\nfunction warnKeyDropped(key: string): void {\r\n  console.warn(`[destr] Dropping \"${key}\" key to prevent prototype pollution.`)\r\n}\r\n\r\nexport type Options = {\r\n  strict?: boolean\r\n}\r\n\r\nexport function destr<T = unknown>(value: any, options: Options = {}): T {\r\n  if (typeof value !== 'string') {\r\n    return value\r\n  }\r\n\r\n  const _value = value.trim()\r\n  if (\r\n    // @ts-ignore\r\n    value[0] === '\"' &&\r\n    value.endsWith('\"') &&\r\n    !value.includes('\\\\')\r\n  ) {\r\n    // @ts-ignore\r\n    return _value.slice(1, -1) as T\r\n  }\r\n\r\n  if (_value.length <= 9) {\r\n    const _lval = _value.toLowerCase()\r\n    if (_lval === 'true') {\r\n      // @ts-ignore\r\n      return true as T\r\n    }\r\n    if (_lval === 'false') {\r\n      // @ts-ignore\r\n      return false as T\r\n    }\r\n    if (_lval === 'undefined') {\r\n      // @ts-ignore\r\n      return undefined as T\r\n    }\r\n    if (_lval === 'null') {\r\n      // @ts-ignore\r\n      return null as T\r\n    }\r\n    if (_lval === 'nan') {\r\n      // @ts-ignore\r\n      return Number.NaN as T\r\n    }\r\n    if (_lval === 'infinity') {\r\n      // @ts-ignore\r\n      return Number.POSITIVE_INFINITY as T\r\n    }\r\n    if (_lval === '-infinity') {\r\n      // @ts-ignore\r\n      return Number.NEGATIVE_INFINITY as T\r\n    }\r\n  }\r\n\r\n  if (!JsonSigRx.test(value)) {\r\n    if (options.strict) {\r\n      throw new SyntaxError('[destr] Invalid JSON')\r\n    }\r\n    // @ts-ignore\r\n    return value as T\r\n  }\r\n\r\n  try {\r\n    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {\r\n      if (options.strict) {\r\n        throw new Error('[destr] Possible prototype pollution')\r\n      }\r\n      return JSON.parse(value, jsonParseTransform)\r\n    }\r\n    return JSON.parse(value)\r\n  } catch (error) {\r\n    if (options.strict) {\r\n      throw error\r\n    }\r\n    // @ts-ignore\r\n    return value as T\r\n  }\r\n}\r\n\r\nexport function safeDestr<T = unknown>(value: any, options: Options = {}): T {\r\n  return destr<T>(value, { ...options, strict: true })\r\n}\r\n\r\nexport default destr\r\n"],"sourceRoot":""}